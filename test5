(in /Users/fumi/github/rdf-4store)
25610
25616
25617
25613
25614
** WARNING: Ruby 1.9 Support is experimental at best. Don't expect correct results! **

RDF::FourStore::Repository 4store when counting statements when counting items
- should respond to #empty?
- should respond to #count and #size
- should implement #empty?
- should implement #count and #size

RDF::FourStore::Repository 4store when enumerating statements when counting statements
- should respond to #empty?
- should respond to #count and #size
- should implement #empty?
- should implement #count and #size

RDF::FourStore::Repository 4store when enumerating statements when enumerating statements
- should respond to #statements
- should respond to #has_statement?
- should respond to #each_statement
- should respond to #enum_statement
each_statement
- should implement #statements (FAILED - 1)
- should implement #has_statement? (FAILED - 2)
each_statement block_given
each_statement
- should implement #each_statement
each_statement
each_statement block_given
each_statement
- should implement #enum_statement

RDF::FourStore::Repository 4store when enumerating statements when enumerating triples
- should respond to #triples
- should respond to #has_triple?
- should respond to #each_triple
- should respond to #enum_triple
each_statement
each_statement
- should implement #triples (FAILED - 3)
- should implement #has_triple?
each_statement
- should implement #each_triple
each_statement
each_statement
- should implement #enum_triple

RDF::FourStore::Repository 4store when enumerating statements when enumerating quads
- should respond to #quads
- should respond to #has_quad?
- should respond to #each_quad
- should respond to #enum_quad
each_statement
each_statement
- should implement #quads (FAILED - 4)
- should implement #has_quad?
each_statement
- should implement #each_quad
each_statement
each_statement
- should implement #enum_quad

RDF::FourStore::Repository 4store when enumerating statements when enumerating subjects
- should respond to #subjects
- should respond to #has_subject?
- should respond to #each_subject
- should respond to #enum_subject
- should implement #subjects
- should implement #has_subject? (FAILED - 5)
- should implement #each_subject (FAILED - 6)
- should implement #enum_subject

RDF::FourStore::Repository 4store when enumerating statements when enumerating predicates
- should respond to #predicates
- should respond to #has_predicate?
- should respond to #each_predicate
- should respond to #enum_predicate
- should implement #predicates
- should implement #has_predicate? (FAILED - 7)
- should implement #each_predicate
- should implement #enum_predicate

RDF::FourStore::Repository 4store when enumerating statements when enumerating objects
- should respond to #objects
- should respond to #has_object?
- should respond to #each_object
- should respond to #enum_object
- should implement #objects
- should implement #has_object? (FAILED - 8)
- should implement #each_object (FAILED - 9)
- should implement #enum_object

RDF::FourStore::Repository 4store when enumerating statements when enumerating contexts
- should respond to #contexts
- should respond to #has_context?
- should respond to #each_context
- should respond to #enum_context
each_statement
- should implement #contexts
each_statement
- should implement #has_context?
each_statement
each_statement
- should implement #each_context
each_statement
each_statement
- should implement #enum_context

RDF::FourStore::Repository 4store when enumerating statements when enumerating graphs
- should respond to #each_graph
- should respond to #enum_graph
each_statement
- should implement #each_graph
each_statement
each_statement
- should implement #enum_graph

RDF::FourStore::Repository 4store when enumerating statements when converting
- should respond to #to_hash
each_statement
each_statement
- should implement #to_hash (FAILED - 10)

RDF::FourStore::Repository 4store when querying statements
- should respond to #query
- should respond to #query_pattern
- should respond to #first
- should respond to #first_subject
- should respond to #first_predicate
- should respond to #first_object
- should respond to #first_literal
- should respond to #first_value

RDF::FourStore::Repository 4store when querying statements#query when called
- should require an argument
- should accept a pattern argument
- should accept a statement argument
- should accept a triple argument
- should accept a quad argument
- should accept a hash argument
- should not alter a given hash argument
- should reject other kinds of arguments

RDF::FourStore::Repository 4store when querying statements#query when called with a block
- should yield statements (FAILED - 11)

RDF::FourStore::Repository 4store when querying statements#query when called without a block
- should return an enumerator
- should return an enumerable enumerator
- should return a queryable enumerator
- should return statements (FAILED - 12)
- should return the correct number of results for array queries (FAILED - 13)
- should return the correct number of results for hash queries (FAILED - 14)

RDF::FourStore::Repository 4store when querying statements#query_pattern when called
- should require an argument
- should call the given block (FAILED - 15)
- should yield statements (FAILED - 16)

RDF::FourStore::Repository 4store when querying statements#first
each_statement
each_statement
each_statement block_given
each_statement
- should be callable without a pattern
each_statement block_given
each_statement
- should return the correct value when the pattern matches (FAILED - 17)
- should return nil when the pattern fails to match anything (FAILED - 18)
- should return nil when self is empty

RDF::FourStore::Repository 4store when querying statements#first_subject
each_statement
each_statement
each_statement
- should be callable without a pattern (FAILED - 19)
each_statement
- should return the correct value when the pattern matches (FAILED - 20)
- should return nil when the pattern fails to match anything (FAILED - 21)
- should return nil when self is empty

RDF::FourStore::Repository 4store when querying statements#first_predicate
each_statement
each_statement
each_statement
- should be callable without a pattern (FAILED - 22)
each_statement
- should return the correct value when the pattern matches (FAILED - 23)
- should return nil when the pattern fails to match anything (FAILED - 24)
- should return nil when self is empty

RDF::FourStore::Repository 4store when querying statements#first_object
each_statement
each_statement
each_statement
- should be callable without a pattern (FAILED - 25)
each_statement
- should return the correct value when the pattern matches (FAILED - 26)
- should return nil when the pattern fails to match anything (FAILED - 27)
- should return nil when self is empty

RDF::FourStore::Repository 4store when querying statements#first_literal
- should be callable without a pattern
- should return the correct value when the pattern matches
- should return nil when the pattern fails to match anything
- should return nil when self is empty

RDF::FourStore::Repository 4store when querying statements#first_value
each_statement
each_statement
each_statement
- should be callable without a pattern (FAILED - 28)
each_statement
- should return the correct value when the pattern matches
- should return nil when the pattern fails to match anything (FAILED - 29)
- should return nil when self is empty

RDF::FourStore::Repository 4store when updating
- should be empty initially
- should be readable
- should be writable
- should be mutable
- should support #load

RDF::FourStore::Repository 4store when updating#load
- should require an argument
- should accept a string filename argument
- should accept an optional hash argument
- should load statements
each_statement
- should load statements with a context override (FAILED - 30)

RDF::FourStore::Repository 4store when updating when inserting statements
- should support #insert
- should not raise errors
- should support inserting one statement at a time
- should support inserting multiple statements at a time
- should insert statements successfully
- should not insert a statement twice (FAILED - 31)
- should treat statements with a different context as distinct

RDF::FourStore::Repository 4store when updating when deleting statements
- should support #delete
- should not raise errors
- should support deleting one statement at a time
- should support deleting multiple statements at a time (FAILED - 32)
- should support wildcard deletions (FAILED - 33)
- should only delete statements when the context matches

RDF::FourStore::Repository 4store when updating when clearing all statements
- should support #clear

RDF::FourStore::Repository 4store as a durable repository
- should support #durable?
- should support #nondurable?
- should not be both durable and nondurable
- should save contents between instantiations

1)
'RDF::FourStore::Repository 4store when enumerating statements when enumerating statements should implement #statements' FAILED
expected: 47,
     got: 0 (using ==)


2)
'RDF::FourStore::Repository 4store when enumerating statements when enumerating statements should implement #has_statement?' FAILED
expected true to be false


3)
'RDF::FourStore::Repository 4store when enumerating statements when enumerating triples should implement #triples' FAILED
expected: 47,
     got: 0 (using ==)


4)
'RDF::FourStore::Repository 4store when enumerating statements when enumerating quads should implement #quads' FAILED
expected: 47,
     got: 0 (using ==)


5)
'RDF::FourStore::Repository 4store when enumerating statements when enumerating subjects should implement #has_subject?' FAILED
expected true to be false


6)
'RDF::FourStore::Repository 4store when enumerating statements when enumerating subjects should implement #each_subject' FAILED
expected: 6,
     got: 12 (using ==)


7)
'RDF::FourStore::Repository 4store when enumerating statements when enumerating predicates should implement #has_predicate?' FAILED
expected true to be false


8)
'RDF::FourStore::Repository 4store when enumerating statements when enumerating objects should implement #has_object?' FAILED
expected true to be false


9)
'RDF::FourStore::Repository 4store when enumerating statements when enumerating objects should implement #each_object' FAILED
expected [#<RDF::URI:0x812e65ec(http://xmlns.com/foaf/0.1/Person)>, #<RDF::URI:0x812e4ebc(http://datagraph.org/bendiken/foaf)>, #<RDF::URI:0x812e3834(http://ar.to/)>, #<RDF::URI:0x812e1240(http://rubygems.org/gems/rdf)>, #<RDF::URI:0x812de6f0(mailto:arto.bendiken@gmail.com)>, #<RDF::Literal:0x812c5860("a033f652c84a4d73b8c26d318c2395699dd2bdfb")>, #<RDF::Literal:0x812bf67c("d0737cceb55eb7d740578d2db1bc0727e3ed49ce")>, #<RDF::Literal:0x812bcaf4("Arto Bendiken")>, #<RDF::URI:0x812b8388(http://datagraph.org/bhuga/foaf)>, #<RDF::URI:0x812b3768(http://bhuga.net/)>, #<RDF::URI:0x812b15b8(mailto:blavender@gmail.com)>, #<RDF::Literal:0x812af84c("dbf45f4ffbd27b67aa84f02a6a31c144727d10af")>, #<RDF::Literal:0x812aca08("Ben Lavender")>, #<RDF::URI:0x812aae40(http://ar.to/#self)>, #<RDF::URI:0x812a7b80(http://blog.datagraph.org/)>, #<RDF::URI:0x812a6798(http://github.com/bendiken/rdf/issues)>, #<RDF::URI:0x812a5394(http://dbpedia.org/resource/Resource_Description_Framework)>, #<RDF::URI:0x812a3ecc(http://dbpedia.org/resource/Ruby_(programming_language))>, #<RDF::Literal:0x812a08e0("2007-10-23")>, #<RDF::Literal:0x8129f5d8("RDF.rb is a pure-Ruby library for working with Resource Description Framework (RDF) data."@en)>, #<RDF::URI:0x8129d674(http://bhuga.net/#ben)>, #<RDF::URI:0x812929f8(http://rubyforge.org/projects/rdf/)>, #<RDF::Node:0x8129162c(_:genid1)>, #<RDF::Node:0x812905e0(_:genid2)>, #<RDF::Node:0x8128f9a0(_:genid3)>, #<RDF::URI:0x8128edd0(http://rdf.rubyforge.org/)>, #<RDF::URI:0x8128dc6c(http://creativecommons.org/licenses/publicdomain/)>, #<RDF::Literal:0x8128a7ec("RDF.rb")>, #<RDF::Literal:0x81289474("Ruby")>, #<RDF::Literal:0x81287af8("A Ruby library for working with Resource Description Framework (RDF) data."@en)>, #<RDF::URI:0x81286ac8(http://datagraph.org/)>, #<RDF::URI:0x812843a0(http://usefulinc.com/ns/doap#Project)>, #<RDF::Literal:0x81275f40("c69f3255ff0639543cc5edfd8116eac8df16fab8")>, #<RDF::Literal:0x812540f8("Hellekin O. Wolf")>, #<RDF::Literal:0x8125238c("f7653fc1ac0e82ebb32f092389bd5fc728eaae12")>, #<RDF::Literal:0x812515c4("John Fieber")>, #<RDF::Literal:0x8124fa18("bedbbf2451e5beb38d59687c0460032aff92cd3c")>, #<RDF::Literal:0x8124eed4("Pius Uzamere")>] to include #<RDF::Literal:0x80639e94("A Ruby library for working with Resource Description Framework (RDF) data."@EN)>


10)
'RDF::FourStore::Repository 4store when enumerating statements when converting should implement #to_hash' FAILED
expected: 12,
     got: 0 (using ==)


11)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#query when called with a block should yield statements'
undefined method `each_statement' for nil:NilClass


12)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#query when called without a block should return statements'
undefined method `each_statement' for nil:NilClass


13)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#query when called without a block should return the correct number of results for array queries'
undefined method `each_statement' for nil:NilClass
(eval):2:in `size'

14)
'RDF::FourStore::Repository 4store when querying statements#query when called without a block should return the correct number of results for hash queries' FAILED
expected: 47,
     got: 0 (using ==)


15)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#query_pattern when called should call the given block'
undefined method `each_statement' for nil:NilClass


16)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#query_pattern when called should yield statements'
undefined method `each_statement' for nil:NilClass


17)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first should return the correct value when the pattern matches'
undefined method `each_statement' for nil:NilClass


18)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first should return nil when the pattern fails to match anything'
undefined method `each_statement' for []:Array


19)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first_subject should be callable without a pattern'
undefined method `subject' for nil:NilClass


20)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first_subject should return the correct value when the pattern matches'
undefined method `subject' for nil:NilClass


21)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first_subject should return nil when the pattern fails to match anything'
undefined method `each_statement' for nil:NilClass


22)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first_predicate should be callable without a pattern'
undefined method `predicate' for nil:NilClass


23)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first_predicate should return the correct value when the pattern matches'
undefined method `predicate' for nil:NilClass


24)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first_predicate should return nil when the pattern fails to match anything'
undefined method `each_statement' for []:Array


25)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first_object should be callable without a pattern'
undefined method `object' for nil:NilClass


26)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first_object should return the correct value when the pattern matches'
undefined method `object' for nil:NilClass


27)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first_object should return nil when the pattern fails to match anything'
undefined method `each_statement' for nil:NilClass


28)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first_value should be callable without a pattern'
undefined method `value' for nil:NilClass


29)
NoMethodError in 'RDF::FourStore::Repository 4store when querying statements#first_value should return nil when the pattern fails to match anything'
undefined method `each_statement' for nil:NilClass


30)
'RDF::FourStore::Repository 4store when updating#load should load statements with a context override' FAILED
expected #has_context?(#<RDF::URI:0x8108ed84(http://example.org/context)>) to return true, got false


31)
'RDF::FourStore::Repository 4store when updating when inserting statements should not insert a statement twice' FAILED
expected: 1,
     got: 2 (using ==)


32)
'RDF::FourStore::Repository 4store when updating when deleting statements should support deleting multiple statements at a time' FAILED
expected #<RDF::Statement:0x81dd0280(<http://rubygems.org/gems/rdf> <http://usefulinc.com/ns/doap#description> RDF.rb is a pure-Ruby library for working with Resource Description Framework (RDF) data. .)> to be false


33)
NoMethodError in 'RDF::FourStore::Repository 4store when updating when deleting statements should support wildcard deletions'
undefined method `each_statement' for nil:NilClass


Finished in 40.766634 seconds

148 examples, 33 failures
